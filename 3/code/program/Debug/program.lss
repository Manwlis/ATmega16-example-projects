
AVRASM ver. 2.2.7  C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\main.asm Sat Oct 24 19:54:02 2020

[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\main.asm(34): Including file 'C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\7_segment_driver.asm'
C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\main.asm(35): Including file 'C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\USART_driver.asm'
[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\main.asm(34): Including file 'C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\7_segment_driver.asm'
C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\main.asm(35): Including file 'C:\Users\Manolis\Documents\GitHub\HRY411-labs\3\code\program\USART_driver.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 #define _M16DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16
                                 #pragma AVRPART ADMIN PART_NAME ATmega16
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ; Program that demonstrates the use of the 7 segment  and drivers.
                                 ;
                                 ; Created: 21/10/2020
                                 ; Author : Emmanouil Petrakos
                                 ; Developed with AtmelStudio 7.0.129
                                 ;
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // temp regs: r16, r17, r18
                                 // subroutine/interrupt param/return regs: r0, r1
                                 // pointer regs: r26, r27, r28, r29
                                 //--------------------------------------------------------------------
                                 
                                 
                                 
                                 ; Reset and Interrupt vectors
                                 .org $000
000000 c0f4                      rjmp init ; Start from initialization routine
                                 .org $016
000016 c08d                      rjmp ISR_URXC ; ISR for USART receive completed.
                                 .org $018
000018 c0aa                      rjmp ISR_UDRE ; ISR for empty transmitter's buffer.
                                 .org $026
000026 c038                      rjmp ISR_TC0 ; ISR for timer/counter0 compare match mode.
                                 
                                 
                                 ; code segment
                                 .org $02A
                                 
                                 // code from includes is moved here by the assembler
                                 .include "7_segment_driver.asm"
                                 
                                 ; 7_segment_driver.asm
                                 ; Driver for an 8 digits 7 segment display. Shows data from SRAM.
                                 ; Data space: 0x0060 to 0x0067, LSB to MSB. Legal digits: 0-9.
                                 ; Framerate ~60Hz per digit.
                                 ;
                                 ; Created: 13/10/2020
                                 ; Author : Emmanouil Petrakos
                                 ; Developed with AtmelStudio 7.0.129
                                 ;
                                 
                                 
                                 .equ OCR_value = 77 ; Compare register value
                                 ; internal SRAM starts at 0x0060
                                 .equ data_pointer = 0x0060 ; position of SRAM used to store data
                                 .equ segments_pointer = 0x0068 ; position of SRAM used to store 7 segments encodings
                                 .equ num_of_data = 8 ;
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Initialize memory, ports and timer that are used by the driver.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16, r28, r29
                                 //--------------------------------------------------------------------
                                 init_7_seg_driver:
                                 
                                 	; save encoding
00002a 940e 003d                 	call write_7_segments
                                 	; set output
00002c 940e 0056                 	call clr_7seg_data
                                 	
                                 	; Set Ports A and C as outputs and init
00002e ef0f                      	ldi r16, 0xFF
00002f bb0a                      	out DDRA, R16
000030 bb04                      	out DDRC, R16
000031 bb0b                      	out PORTA, R16 ; all segments off
000032 e800                      	ldi r16, 0b10000000 ; in order to start from rightmost 7 segment
000033 bb05                      	out PORTC, R16
                                 
                                 	; Set Timer0 at ~2ms
000034 e00c                      	ldi r16,( 1 << CS02 ) | ( 1 << WGM01 )
000035 bf03                      	out TCCR0,r16 ; Timer clock = system clock / 64. Clear counter on match.
000036 e001                      	ldi r16,1<<TOV0
000037 bf08                      	out TIFR,r16 ; Clear TOV0/ clear pending interrupts
000038 e002                      	ldi r16,1<<OCIE0
000039 bf09                      	out TIMSK,r16 ; Enable Timer/Counter0 compare interrupt
00003a e40d                      	ldi r16,OCR_value
00003b bf0c                      	out OCR0,r16 ; Set Compare Register
                                 
00003c 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Save in SRAM numbers 0-9 in 7 segment format.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16, r28, r29
                                 //--------------------------------------------------------------------
                                 write_7_segments:
                                 	; Set memory pointer 
00003d e0d0                      	ldi r29, HIGH( segments_pointer ) ; pointer registers Y (r28:r29)
00003e e6c8                          ldi r28, LOW( segments_pointer ) ; index X doesn't support displacement
                                 
                                 	; save encodings
00003f e003                      	ldi r16, 0b00000011
000040 8308                      	std Y+0, r16
000041 e90f                      	ldi r16, 0b10011111
000042 8309                      	std Y+1, r16
000043 e205                      	ldi r16, 0b00100101
000044 830a                      	std Y+2, r16
000045 e00d                      	ldi r16, 0b00001101
000046 830b                      	std Y+3, r16
000047 e909                      	ldi r16, 0b10011001
000048 830c                      	std Y+4, r16
000049 e409                      	ldi r16, 0b01001001
00004a 830d                      	std Y+5, r16
00004b e401                      	ldi r16, 0b01000001
00004c 830e                      	std Y+6, r16
00004d e10f                      	ldi r16, 0b00011111
00004e 830f                      	std Y+7, r16
00004f e001                      	ldi r16, 0b00000001
000050 8708                      	std Y+8, r16
000051 e009                      	ldi r16, 0b00001001
000052 8709                      	std Y+9, r16
000053 ef0f                      	ldi r16, 0b11111111 ; 0x0A 7 segment encoding
000054 870a                      	std Y+10, r16
                                 
000055 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Initialize the SRAM where the data is stored.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16, r26, r27
                                 //--------------------------------------------------------------------
                                 clr_7seg_data:
                                 	; Set memory pointer 
000056 e0b0                      	ldi r27, HIGH( data_pointer ) ; pointer registers X (r26:r27)
000057 e6a0                          ldi r26, LOW( data_pointer )
000058 2700                      	clr r16 ; empty reg
000059 e01a                      	ldi r17, 0x0A
                                 	set_data_loop:
00005a 931d                      		st X+, r17 ; store to SRAM / post increment
00005b 9503                      		inc r16	
00005c 3008                      		cpi r16, num_of_data
00005d f7e1                      		brne set_data_loop
00005e 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Interrupt service routine for timer/counter0 compare match mode.
                                 // Controls 7 segments outputs.
                                 // arguments: none
                                 // returns: none
                                 // changes: r0, r1, r16, r17, r18, r26, r27
                                 //--------------------------------------------------------------------
                                 ISR_TC0:
                                 	; show nothing
00005f ef0f                      	ldi r16, 0xFF
000060 bb0b                      	out PORTA, R16
                                 	
000061 b205                      	in r0, PORTC ; get currenty enabled 7 seg
000062 d00d                      	rcall ring_counter ; calculate next 7 seg
000063 ba05                      	out PORTC, r0 ; disable enabled 7 seg and enable next
                                 
                                 	; read from mem based using ring counter value as offset
000064 d00f                      	rcall ring_to_bcd
000065 2d01                      	mov r16, r1
000066 950a                      	dec r16 ; 1st number is in pos X+0, 2nd number is in pos X+1, etc.
                                 
000067 e0b0                      	ldi r27, HIGH( data_pointer ) ; pointer registers X (r26:r27)
000068 e6a0                          ldi r26, LOW( data_pointer )
                                 	; add offset to mem pointer registers.
000069 2711                      	clr r17 ; empty reg
00006a 0fa0                      	add r26, r16
00006b 1fb1                      	adc r27, r17
                                 
00006c 900c                      	ld r0, X ; read data in bcd format
                                 
00006d d00c                      	rcall BCD_to_7_segment_Decoder ; decode
00006e ba1b                      	out PORTA, r1 ; put output
                                 
00006f 9518                      	reti ; clears interrupt flag
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Circular shift to the left. ex: 00001000 -> 00010000
                                 // arguments: input in r0
                                 // returns: shifted output in r0
                                 // changes: r0, r16
                                 //--------------------------------------------------------------------
                                 ring_counter:
000070 2700                      	clr r16 ; empty reg
000071 0c00                      	lsl r0 ; Logical Shift Left / bit 0 cleared, bit 7 to carry
000072 1e00                      	adc r0, r16 ; Add with carry and empty reg / carry to bit 0
                                 
000073 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Transform a ring number to bcd. ex: 01000000 -> 00000111
                                 // arguments: ring format number in r0
                                 // returns: bcd number in r1
                                 // changes: r0, r1, r16
                                 //--------------------------------------------------------------------
                                 ring_to_bcd:
000074 2411                      	clr r1
000075 2d00                      	mov r16, r0
                                 ; bcd number = num of shift that are needed to clear ring number.
                                 rtb_loop:
000076 9413                      	inc r1
000077 9506                      	lsr r16
000078 f7e9                      	brne rtb_loop
                                 
000079 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Decodes a BCD number (0-9) to 7 segment format. ex: 00000010 -> 00100101
                                 // 7 segment is in common cathode format.
                                 // arguments: bcd number in r0
                                 // returns: 7 segment number in r1
                                 // changes: r1, r16, r17, r18, r26, r27
                                 //--------------------------------------------------------------------
                                 BCD_to_7_segment_Decoder:
                                 	; check if data can be translated in 7 segment format
00007a 2d00                      	mov r16,r0
00007b ef1f                      	ldi r17, 0b11111111 ; no segment enabled
00007c 300b                      	cpi r16, 0x0B
00007d f430                      	brsh bcd_to_7seg_exit ; if data >= 0x0B (unsigned), skip
                                 
                                 	; get 7 segment format
00007e e0b0                      	ldi r27, HIGH( segments_pointer ) ; pointer registers X (r26:r27)
00007f e6a8                          ldi r26, LOW( segments_pointer )
                                 	; add offset to mem pointer registers.
000080 2722                      	clr r18 ; empty reg
000081 0fa0                      	add r26, r16
000082 1fb2                      	adc r27, r18
                                 
000083 911c                      	ld r17, X ; read 7 segment number
                                 
                                 bcd_to_7seg_exit:
000084 2e11                      	mov r1, r17
000085 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Saves a bcd in the first position of drivers data mem.
                                 // Moves all old data one position forward. Last element gets discarded.
                                 // arguments: input character in r0
                                 // returns: none
                                 // changes: r16, r17, r26, r27
                                 //--------------------------------------------------------------------
                                 save_to_7seg_data:
                                 
000086 e0b0                      	ldi r27, HIGH( data_pointer ) ; pointer registers X (r26:r27)
000087 e6a0                          ldi r26, LOW( data_pointer )
000088 9616                      	adiw X, num_of_data - 2 ; pos of the second from last element.
000089 e007                      	ldi r16, num_of_data - 1 ; loop iterations. -1 because the last element will be discarded.
                                 
                                 	; Move all pre-existing data one position up. Top one gets discarded.
                                 move_up_loop:
00008a 911d                      	ld r17, X+ ; Read element. Post increment to get the pos where it will be stored.
00008b 931c                      	st X, r17 ; Save it.
00008c 9712                      	sbiw X, 2 ; Next element.
                                 	
00008d 950a                      	dec r16
00008e f7d9                      	brne move_up_loop
                                 
00008f e0b0                      	ldi r27, HIGH( data_pointer ) ; new data get saved in first position
000090 e6a0                          ldi r26, LOW( data_pointer )
000091 920c                      	st X, r0
                                 
000092 9508                      	ret
                                 
                                 .include "USART_driver.asm"
                                 
                                 ; USART_driver.asm
                                 ; Driver for the USART on PORTC.
                                 ; 9600 baudrate, 8 data bits, 1 stop bit, no parity
                                 ;
                                 ; Created: 22/10/2020
                                 ; Author : Emmanouil Petrakos
                                 ; Developed with AtmelStudio 7.0.129
                                 ;
                                 
                                 ; ( F_CPU / ( baudrate * 16 ) ) - 1 = ~64,1
                                 .equ UBBR_value = 64
                                 
                                 ; Transmitter need an FSM. This position is used to keep the status.
                                 .equ transmiter_status_pointer = 0x0073
                                 ; how many responces have piled up
                                 .equ num_transmittion_left = 0x0074
                                 ; Transmitter States
                                 .equ none = 0xFF
                                 .equ O = 0x4F
                                 .equ K = 0x4B
                                 .equ CR = 0x0D
                                 .equ LF = 0x0A
                                 
                                 //--------------------------------------------------------------------
                                 // Initialize memory, ports and timer that are used by the driver.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16
                                 //--------------------------------------------------------------------
                                 init_USART_driver:
                                 
                                 	; set RXD as input and TXD as output.
000093 9888                      	cbi DDRD, 0 ; RXD
000094 9a89                      	sbi DDRD, 1 ; TXD
                                 
                                 	; Set UBRR for 9600 baudrate when clk is 10MHz
000095 e000                      	ldi r16, HIGH( UBBR_value ) ; Upper half byte
000096 bd00                      	out UBRRH, r16 ; to upper Baud Rate Register
000097 e400                      	ldi r16, LOW( UBBR_value ) ; Lower byte
000098 b909                      	out UBRRL, r16 ; to lower Baud Rate Register
                                 
                                 	; UCSRA doesn't need to change, initial values are okay
                                 
                                 	; Enable receiver, recieve completed interrupt the transmiter
                                 	; 8 bit word: UCSZ2 = 0
000099 e908                      	ldi r16, ( 1 << RXEN ) | ( 1 << RXCIE ) | ( 1 << TXEN )
00009a b90a                      	out UCSRB, r16
                                 
                                 	; Write in UCSRC: URSEL = 1. Asynchronous operation: UMSEL = 0.
                                 	; Parity Disabled: UPM1:0 = 00. 8 bit word: UCSZ1:0 = 11
00009b e806                      	ldi r16, ( 1 << URSEL ) | ( 1 << UCSZ1 ) | ( 1 << UCSZ0 )
00009c bd00                      	out UCSRC, r16
                                 
                                 	; initialize transmitter's FSM to neutral state and num of remaining transmittions to 0.
00009d ef0f                      	ldi r16, none
00009e 9300 0073                 	sts transmiter_status_pointer, r16
0000a0 2700                      	clr r16
0000a1 9300 0074                 	sts num_transmittion_left, r16
                                 
0000a3 9508                      	ret
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Interrupt service routine for USART receive completed.
                                 // Transmition is errorless and previous/next inputs/states are irrelevant so a state-machine isn't needed.
                                 // Only the current input is needed to take the appropiate action.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16, r17, r15(for debug)
                                 //--------------------------------------------------------------------
                                 ISR_URXC:
                                 
                                 	; receive frame
0000a4 b10c                      	in r16, UDR
0000a5 b10c                      	in r16, UDR ; for debug
0000a6 2d0f                      	mov r16, r15 ; for debug
0000a7 2f10                      	mov r17, r16 ; r16 change values in subroutines and need a reg with immediate capabilities.
                                 
0000a8 3413                      	cpi r17, 0x43 ; check if C
0000a9 f059                      	breq frame_C_N
0000aa 341e                      	cpi r17, 0x4E ; check if N
0000ab f049                      	breq frame_C_N
0000ac 3411                      	cpi r17, 0x41 ; check if A
0000ad f049                      	breq frame_A_T_CR
0000ae 3514                      	cpi r17, 0x54 ; check if T
0000af f039                      	breq frame_A_T_CR
0000b0 301d                      	cpi r17, 0x0D ; check if <CR>
0000b1 f029                      	breq frame_A_T_CR
0000b2 301a                      	cpi r17, 0x0A ; check if <LF>
0000b3 f021                      	breq frame_LF
                                 	; if program reach here, frame is a character ( transmition is errorless )
0000b4 c00a                      	rjmp frame_number
                                 	
                                 frame_C_N:
0000b5 dfa0                      	rcall clr_7seg_data
0000b6 c00b                      	rjmp exit_ISR_URXC
                                 
                                 frame_A_T_CR:
0000b7 c00a                      	rjmp exit_ISR_URXC
                                 
                                 frame_LF:
                                 	; increase the number of responces left
0000b8 9100 0074                 	lds r16, num_transmittion_left
0000ba 9503                      	inc r16 ; if >= 256 responses pile up, oopsie. It isn't expected to happen during normal operation.
0000bb 9300 0074                 	sts num_transmittion_left, r16
                                 	; enable transmitter interrupts to start the response. If it is already enabled, nothing changes.
0000bd 9a55                      	sbi UCSRB, UDRIE
0000be c003                      	rjmp exit_ISR_URXC
                                 
                                 frame_number:
                                 	; send data to bcd
0000bf 701f                      	andi r17, 0x0F ; clears top half byte, ascii -> bcd
0000c0 2e01                      	mov r0, r17
0000c1 dfc4                      	rcall save_to_7seg_data ; save bcd it in SRAM
                                 
                                 exit_ISR_URXC:
0000c2 9518                      	reti
                                 
                                 
                                 //--------------------------------------------------------------------
                                 // Interrupt service routine for USART transmitte completed.
                                 // FSM is oneway (see report), input is irrelevant. Only current state is needed to compute next state.
                                 // Oopsie if new <LF> is received before the transmittion is completed.
                                 // arguments: none
                                 // returns: none
                                 // changes: r16, r17
                                 //--------------------------------------------------------------------
                                 ISR_UDRE:
                                 
                                 	; read old state
0000c3 9100 0073                 	lds r16, transmiter_status_pointer
                                 	; check state
0000c5 3f0f                      	cpi r16, none
0000c6 f041                      	breq prv_state_none
0000c7 340f                      	cpi r16, O
0000c8 f089                      	breq prv_state_O
0000c9 340b                      	cpi r16, K
0000ca f0a9                      	breq prv_state_K
0000cb 300d                      	cpi r16, CR
0000cc f0c9                      	breq prv_state_CR
0000cd 300a                      	cpi r16, LF
0000ce f0e9                      	breq prv_state_LF
                                 
                                 ; new state
                                 prv_state_none:
                                 	; decrease the number of responces left
0000cf 9100 0074                 	lds r16, num_transmittion_left
0000d1 950a                      	dec r16
0000d2 9300 0074                 	sts num_transmittion_left, r16
                                 	; change state
0000d4 e40f                      	ldi r16, O
0000d5 9300 0073                 	sts transmiter_status_pointer, r16
                                 	; send character. The character is the state.
0000d7 b90c                      	out UDR,r16
                                 	; Transmiter's UDR is write-only and can't be read by the simulator.
                                 	; Also only I/O registers can be logged so r16 can't be used for logging purposes.
                                 	; TCNT2 is used for logging.
0000d8 bd04                      	out TCNT2,r16
0000d9 c01a                      	rjmp ISR_UDRE_exit
                                 
                                 prv_state_O:
                                 	; change state
0000da e40b                      	ldi r16, K
0000db 9300 0073                 	sts transmiter_status_pointer, r16
                                 	; send character. The character is the state.
0000dd b90c                      	out UDR,r16
0000de bd04                      	out TCNT2,r16
0000df c014                      	rjmp ISR_UDRE_exit
                                 
                                 prv_state_K:
                                 	; change state
0000e0 e00d                      	ldi r16, CR
0000e1 9300 0073                 	sts transmiter_status_pointer, r16
                                 	; send character. The character is the state.
0000e3 b90c                      	out UDR,r16
0000e4 bd04                      	out TCNT2,r16
0000e5 c00e                      	rjmp ISR_UDRE_exit
                                 
                                 prv_state_CR:
                                 	; change state
0000e6 e00a                      	ldi r16, LF
0000e7 9300 0073                 	sts transmiter_status_pointer, r16
                                 	; send character. The character is the state.
0000e9 b90c                      	out UDR,r16
0000ea bd04                      	out TCNT2,r16
0000eb c008                      	rjmp ISR_UDRE_exit
                                 
                                 prv_state_LF:
                                 	; change state
0000ec ef0f                      	ldi r16, none
0000ed 9300 0073                 	sts transmiter_status_pointer, r16
                                 	; if no more transmittion required, disable transmitter interrupts.
0000ef 9100 0074                 	lds r16, num_transmittion_left
0000f1 3000                      	cpi r16, 0
0000f2 f409                      	brne ISR_UDRE_exit
                                 	; disable interrupt
0000f3 9855                      	cbi UCSRB, UDRIE
                                 
                                 	; exit
                                 ISR_UDRE_exit:
0000f4 9518                      	reti
                                 
                                 //--------------------------------------------------------------------
                                 // Main initialization routine
                                 // Runs once at program startup. Sets SP, drivers and enables interrupts.
                                 //--------------------------------------------------------------------
                                 init:
                                 	; Set stack pointer so program returns from interrupt where it occurred
0000f5 e004                      	ldi r16, HIGH( RAMEND ) ; Upper byte
0000f6 bf0e                      	out SPH,r16 ; to stack pointer
0000f7 e50f                      	ldi r16, LOW( RAMEND ) ; Lower byte
0000f8 bf0d                      	out SPL,r16 ; to stack pointer
                                 
0000f9 df30                      	rcall init_7_seg_driver
0000fa df98                      	rcall init_USART_driver
                                 
                                 	; Enable interrupts
0000fb 9478                      	sei ; breakpoint here to execute Stimulifile
                                 
                                 //--------------------------------------------------------------------
                                 // Infinite loop. Main program.
                                 // Nothing happens here, functionality is served in interrupt service routines.
                                 //--------------------------------------------------------------------
                                 main_program:
0000fc cfff                      rjmp main_program 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
x  :   8 y  :  11 z  :   0 r0 :   9 r1 :   5 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   1 r16: 105 r17:  18 r18:   2 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   7 r27:   7 r28:   1 
r29:   1 r30:   0 r31:   0 
Registers used: 12 out of 35 (34.3%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   2 adiw  :   1 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  11 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   2 cbi   :   2 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  14 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   3 jmp   :   0 
ld    :   3 ldd   :   0 ldi   :  45 lds   :   4 lpm   :   0 lsl   :   1 
lsr   :   1 mov   :   7 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  25 pop   :   0 
push  :   0 rcall :   7 ret   :   8 reti  :   3 rjmp  :  13 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :  11 sts   :   9 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 31 out of 113 (27.4%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001fa    430      0    430   16384   2.6%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
