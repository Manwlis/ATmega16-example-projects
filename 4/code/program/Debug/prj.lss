
prj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  0000014c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062b  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058c  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d0  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f9  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001295  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 67 00 	call	0xce	; 0xce <main>
  74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
}


void init()
{
	data[0] = 1;
  7c:	ea e6       	ldi	r30, 0x6A	; 106
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 83       	st	Z, r24
	data[1] = 2;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	81 83       	std	Z+1, r24	; 0x01
	data[2] = 3;
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	82 83       	std	Z+2, r24	; 0x02
	data[3] = 4;
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	83 83       	std	Z+3, r24	; 0x03
	data[4] = 5;
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	84 83       	std	Z+4, r24	; 0x04
	data[5] = 6;
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	85 83       	std	Z+5, r24	; 0x05
	data[6] = 7;
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	86 83       	std	Z+6, r24	; 0x06
	data[7] = 8;
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	87 83       	std	Z+7, r24	; 0x07
	
	segments[0] = 11;
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	80 83       	st	Z, r24
	segments[1] = 12;
  a8:	8c e0       	ldi	r24, 0x0C	; 12
  aa:	81 83       	std	Z+1, r24	; 0x01
	segments[2] = 13;
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	82 83       	std	Z+2, r24	; 0x02
	segments[3] = 14;
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	83 83       	std	Z+3, r24	; 0x03
	segments[4] = 15;
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	84 83       	std	Z+4, r24	; 0x04
	segments[5] = 16;
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	85 83       	std	Z+5, r24	; 0x05
	segments[6] = 17;
  bc:	81 e1       	ldi	r24, 0x11	; 17
  be:	86 83       	std	Z+6, r24	; 0x06
	segments[7] = 18;
  c0:	82 e1       	ldi	r24, 0x12	; 18
  c2:	87 83       	std	Z+7, r24	; 0x07
	segments[8] = 19;
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	80 87       	std	Z+8, r24	; 0x08
	segments[9] = 20;
  c8:	84 e1       	ldi	r24, 0x14	; 20
  ca:	81 87       	std	Z+9, r24	; 0x09
  cc:	08 95       	ret

000000ce <main>:
unsigned char segments[10];


int main()
{
	init();
  ce:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x4>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
