
program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .noinit       00000015  00800060  00800060  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000308  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d3  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000612  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000620  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007f  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_11>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_12>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 02 01 	call	0x204	; 0x204 <main>
  64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_11>:
//--------------------------------------------------------------------
.global USART_RXC_vect
USART_RXC_vect:

	; receive frame
	in r18, _SFR_IO_ADDR( UDR )
  6c:	2c b1       	in	r18, 0x0c	; 12
	in r18, _SFR_IO_ADDR( UDR ) ; for debug
  6e:	2c b1       	in	r18, 0x0c	; 12
	mov r18, r20 ; for debug
  70:	24 2f       	mov	r18, r20
	mov r19, r18 ; r18 change values in subroutines and need a reg with immediate capabilities.
  72:	32 2f       	mov	r19, r18

	cpi r19, 0x43 ; check if C
  74:	33 34       	cpi	r19, 0x43	; 67
	breq frame_C_N
  76:	59 f0       	breq	.+22     	; 0x8e <frame_C_N>
	cpi r19, 0x4E ; check if N
  78:	3e 34       	cpi	r19, 0x4E	; 78
	breq frame_C_N
  7a:	49 f0       	breq	.+18     	; 0x8e <frame_C_N>
	cpi r19, 0x41 ; check if A
  7c:	31 34       	cpi	r19, 0x41	; 65
	breq frame_A_T_CR
  7e:	49 f0       	breq	.+18     	; 0x92 <frame_A_T_CR>
	cpi r19, 0x54 ; check if T
  80:	34 35       	cpi	r19, 0x54	; 84
	breq frame_A_T_CR
  82:	39 f0       	breq	.+14     	; 0x92 <frame_A_T_CR>
	cpi r19, 0x0D ; check if <CR>
  84:	3d 30       	cpi	r19, 0x0D	; 13
	breq frame_A_T_CR
  86:	29 f0       	breq	.+10     	; 0x92 <frame_A_T_CR>
	cpi r19, 0x0A ; check if <LF>
  88:	3a 30       	cpi	r19, 0x0A	; 10
	breq frame_LF
  8a:	21 f0       	breq	.+8      	; 0x94 <frame_LF>
	; if program reach here, frame is a character ( transmition is errorless )
	rjmp frame_number
  8c:	0a c0       	rjmp	.+20     	; 0xa2 <frame_number>

0000008e <frame_C_N>:
	
frame_C_N:
	rcall clr_7seg_data
  8e:	71 d0       	rcall	.+226    	; 0x172 <clr_7seg_data>
	rjmp exit_ISR_URXC
  90:	0b c0       	rjmp	.+22     	; 0xa8 <exit_ISR_URXC>

00000092 <frame_A_T_CR>:

frame_A_T_CR:
	rjmp exit_ISR_URXC
  92:	0a c0       	rjmp	.+20     	; 0xa8 <exit_ISR_URXC>

00000094 <frame_LF>:

frame_LF:
	; increase the number of responces left
	lds r18, num_transmits_left
  94:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	inc r18 ; if >= 256 responses pile up, oopsie. It isn't expected to happen during normal operation.
  98:	23 95       	inc	r18
	sts num_transmits_left, r18
  9a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	; enable transmitter interrupts to start the response. If it is already enabled, nothing changes.
	sbi _SFR_IO_ADDR( UCSRB ), UDRIE
  9e:	55 9a       	sbi	0x0a, 5	; 10
	rjmp exit_ISR_URXC
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <exit_ISR_URXC>

000000a2 <frame_number>:

frame_number:
	; send data to bcd
	andi r19, 0x0F ; clears top half byte, ascii -> bcd
  a2:	3f 70       	andi	r19, 0x0F	; 15
	mov r0, r19
  a4:	03 2e       	mov	r0, r19
	rcall save_to_7seg_data ; save bcd it in SRAM
  a6:	58 d0       	rcall	.+176    	; 0x158 <save_to_7seg_data>

000000a8 <exit_ISR_URXC>:

exit_ISR_URXC:
	reti
  a8:	18 95       	reti

000000aa <__vector_12>:
//--------------------------------------------------------------------
.global USART_UDRE_vect
USART_UDRE_vect:

	; read old state
	lds r18, transmitter_status
  aa:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <transmitter_status>
	; check state
	cpi r18, none
  ae:	2f 3f       	cpi	r18, 0xFF	; 255
	breq prv_state_none
  b0:	41 f0       	breq	.+16     	; 0xc2 <prv_state_none>
	cpi r18, O
  b2:	2f 34       	cpi	r18, 0x4F	; 79
	breq prv_state_O
  b4:	89 f0       	breq	.+34     	; 0xd8 <prv_state_O>
	cpi r18, K
  b6:	2b 34       	cpi	r18, 0x4B	; 75
	breq prv_state_K
  b8:	a9 f0       	breq	.+42     	; 0xe4 <prv_state_K>
	cpi r18, CR
  ba:	2d 30       	cpi	r18, 0x0D	; 13
	breq prv_state_CR
  bc:	c9 f0       	breq	.+50     	; 0xf0 <prv_state_CR>
	cpi r18, LF
  be:	2a 30       	cpi	r18, 0x0A	; 10
	breq prv_state_LF
  c0:	e9 f0       	breq	.+58     	; 0xfc <prv_state_LF>

000000c2 <prv_state_none>:

; new state
prv_state_none:
	; decrease the number of responces left
	lds r18, num_transmits_left
  c2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	dec r18
  c6:	2a 95       	dec	r18
	sts num_transmits_left, r18
  c8:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
	; change state
	ldi r18, O
  cc:	2f e4       	ldi	r18, 0x4F	; 79
	sts transmitter_status, r18
  ce:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <transmitter_status>
	; send character. The character is the state.
	out _SFR_IO_ADDR( UDR ), r18
  d2:	2c b9       	out	0x0c, r18	; 12
	; Transmiter's UDR is write-only and can't be read by the simulator.
	; Also only I/O registers can be logged so r18 can't be used for logging purposes.
	; TCNT2 is used for logging.
	out _SFR_IO_ADDR( TCNT2 ), r18
  d4:	24 bd       	out	0x24, r18	; 36
	rjmp ISR_UDRE_exit
  d6:	1a c0       	rjmp	.+52     	; 0x10c <ISR_UDRE_exit>

000000d8 <prv_state_O>:

prv_state_O:
	; change state
	ldi r18, K
  d8:	2b e4       	ldi	r18, 0x4B	; 75
	sts transmitter_status, r18
  da:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <transmitter_status>
	; send character. The character is the state.
	out _SFR_IO_ADDR( UDR ), r18
  de:	2c b9       	out	0x0c, r18	; 12
	out _SFR_IO_ADDR( TCNT2 ), r18
  e0:	24 bd       	out	0x24, r18	; 36
	rjmp ISR_UDRE_exit
  e2:	14 c0       	rjmp	.+40     	; 0x10c <ISR_UDRE_exit>

000000e4 <prv_state_K>:

prv_state_K:
	; change state
	ldi r18, CR
  e4:	2d e0       	ldi	r18, 0x0D	; 13
	sts transmitter_status, r18
  e6:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <transmitter_status>
	; send character. The character is the state.
	out _SFR_IO_ADDR( UDR ), r18
  ea:	2c b9       	out	0x0c, r18	; 12
	out _SFR_IO_ADDR( TCNT2 ), r18
  ec:	24 bd       	out	0x24, r18	; 36
	rjmp ISR_UDRE_exit
  ee:	0e c0       	rjmp	.+28     	; 0x10c <ISR_UDRE_exit>

000000f0 <prv_state_CR>:

prv_state_CR:
	; change state
	ldi r18, LF
  f0:	2a e0       	ldi	r18, 0x0A	; 10
	sts transmitter_status, r18
  f2:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <transmitter_status>
	; send character. The character is the state.
	out _SFR_IO_ADDR( UDR ), r18
  f6:	2c b9       	out	0x0c, r18	; 12
	out _SFR_IO_ADDR( TCNT2 ), r18
  f8:	24 bd       	out	0x24, r18	; 36
	rjmp ISR_UDRE_exit
  fa:	08 c0       	rjmp	.+16     	; 0x10c <ISR_UDRE_exit>

000000fc <prv_state_LF>:

prv_state_LF:
	; change state
	ldi r18, none
  fc:	2f ef       	ldi	r18, 0xFF	; 255
	sts transmitter_status, r18
  fe:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <transmitter_status>
	; if no more transmittion required, disable transmitter interrupts.
	lds r18, num_transmits_left
 102:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	cpi r18, 0
 106:	20 30       	cpi	r18, 0x00	; 0
	brne ISR_UDRE_exit
 108:	09 f4       	brne	.+2      	; 0x10c <ISR_UDRE_exit>
	; disable interrupt
	cbi _SFR_IO_ADDR( UCSRB ), UDRIE
 10a:	55 98       	cbi	0x0a, 5	; 10

0000010c <ISR_UDRE_exit>:

	; exit
ISR_UDRE_exit:
	reti
 10c:	18 95       	reti

0000010e <__vector_19>:
// changes: r0, r16, r18, r19, r26, r27, r31
//--------------------------------------------------------------------
.global TIMER0_COMP_vect
TIMER0_COMP_vect:
	; show nothing
	ldi r18, 0xFF
 10e:	2f ef       	ldi	r18, 0xFF	; 255
	out _SFR_IO_ADDR( PORTA ), R18
 110:	2b bb       	out	0x1b, r18	; 27
	
	in r0, _SFR_IO_ADDR( PORTC ) ; get currenty enabled 7 seg
 112:	05 b2       	in	r0, 0x15	; 21
	rcall ring_counter ; calculate next 7 seg
 114:	0c d0       	rcall	.+24     	; 0x12e <ring_counter>
	out _SFR_IO_ADDR( PORTC ), r0 ; disable enabled 7 seg and enable next
 116:	05 ba       	out	0x15, r0	; 21

	; read from mem based using ring counter value as offset
	rcall ring_to_bcd
 118:	0e d0       	rcall	.+28     	; 0x136 <ring_to_bcd>
	mov r18, r31
 11a:	2f 2f       	mov	r18, r31
	dec r18 ; 1st number is in pos X+0, 2nd number is in pos X+1, etc.
 11c:	2a 95       	dec	r18

	ldi r27, hi8( data ) ; pointer registers X (r26:r27)
 11e:	b0 e0       	ldi	r27, 0x00	; 0
    ldi r26, lo8( data )
 120:	ad e6       	ldi	r26, 0x6D	; 109
	; add offset to mem pointer registers.
	add r26, r18
 122:	a2 0f       	add	r26, r18
	adc r27, r1	; r1 is always empty
 124:	b1 1d       	adc	r27, r1

	ld r0, X ; read data in bcd format
 126:	0c 90       	ld	r0, X

	rcall BCD_to_7_segment_Decoder ; decode
 128:	0c d0       	rcall	.+24     	; 0x142 <BCD_to_7_segment_Decoder>
	out _SFR_IO_ADDR( PORTA ), r31 ; put output
 12a:	fb bb       	out	0x1b, r31	; 27

	reti ; clears interrupt flag
 12c:	18 95       	reti

0000012e <ring_counter>:
// arguments: input in r0
// returns: shifted output in r0
// changes: r0, r18
//--------------------------------------------------------------------
ring_counter:
	clr r18 ; empty reg
 12e:	22 27       	eor	r18, r18
	lsl r0 ; Logical Shift Left / bit 0 cleared, bit 7 to carry
 130:	00 0c       	add	r0, r0
	adc r0, r18 ; Add with carry and empty reg / carry to bit 0
 132:	02 1e       	adc	r0, r18

	ret
 134:	08 95       	ret

00000136 <ring_to_bcd>:
// arguments: ring format number in r0
// returns: bcd number in r31
// changes: r18, r31
//--------------------------------------------------------------------
ring_to_bcd:
	clr r31
 136:	ff 27       	eor	r31, r31
	mov r18, r0
 138:	20 2d       	mov	r18, r0

0000013a <rtb_loop>:
; bcd number = num of shift that are needed to clear ring number.
rtb_loop:
	inc r31
 13a:	f3 95       	inc	r31
	lsr r18
 13c:	26 95       	lsr	r18
	brne rtb_loop
 13e:	e9 f7       	brne	.-6      	; 0x13a <rtb_loop>

	ret
 140:	08 95       	ret

00000142 <BCD_to_7_segment_Decoder>:
// returns: 7 segment number in r31
// changes: r1, r18, r26, r27
//--------------------------------------------------------------------
BCD_to_7_segment_Decoder:
	; check if data can be translated in 7 segment format
	mov r18,r0
 142:	20 2d       	mov	r18, r0
	ldi r19, 0b11111111 ; no segment enabled
 144:	3f ef       	ldi	r19, 0xFF	; 255
	cpi r18, 0x0B
 146:	2b 30       	cpi	r18, 0x0B	; 11
	brsh bcd_to_7seg_exit ; if data >= 0x0B (unsigned), skip
 148:	28 f4       	brcc	.+10     	; 0x154 <bcd_to_7seg_exit>

	; get 7 segment format
	ldi r27, hi8( segments_encoding ) ; pointer registers X (r26:r27)
 14a:	b0 e0       	ldi	r27, 0x00	; 0
    ldi r26, lo8( segments_encoding )
 14c:	a2 e6       	ldi	r26, 0x62	; 98
	; add offset to mem pointer registers.
	add r26, r18
 14e:	a2 0f       	add	r26, r18
	adc r27, r1	; r1 is always empty
 150:	b1 1d       	adc	r27, r1

	ld r19, X ; read 7 segment number
 152:	3c 91       	ld	r19, X

00000154 <bcd_to_7seg_exit>:

bcd_to_7seg_exit:
	mov r31, r19
 154:	f3 2f       	mov	r31, r19
	ret
 156:	08 95       	ret

00000158 <save_to_7seg_data>:
// changes: r18, r19, r26, r27
//--------------------------------------------------------------------
.global save_to_7seg_data
save_to_7seg_data:

	ldi r27, hi8( data ) ; pointer registers X (r26:r27)
 158:	b0 e0       	ldi	r27, 0x00	; 0
    ldi r26, lo8( data )
 15a:	ad e6       	ldi	r26, 0x6D	; 109
	adiw X, num_of_data - 2 ; pos of the second from last element.
 15c:	16 96       	adiw	r26, 0x06	; 6
	ldi r18, num_of_data - 1 ; loop iterations. -1 because the last element will be discarded.
 15e:	27 e0       	ldi	r18, 0x07	; 7

00000160 <move_up_loop>:

	; Move all pre-existing data one position up. Top one gets discarded.
move_up_loop:
	ld r19, X+ ; Read element. Post increment to get the pos where it will be stored.
 160:	3d 91       	ld	r19, X+
	st X, r19 ; Save it.
 162:	3c 93       	st	X, r19
	sbiw X, 2 ; Next element.
 164:	12 97       	sbiw	r26, 0x02	; 2
	
	dec r18
 166:	2a 95       	dec	r18
	brne move_up_loop
 168:	d9 f7       	brne	.-10     	; 0x160 <move_up_loop>

	ldi r27, hi8( data ) ; new data get saved in first position
 16a:	b0 e0       	ldi	r27, 0x00	; 0
    ldi r26, lo8( data )
 16c:	ad e6       	ldi	r26, 0x6D	; 109
	st X, r0
 16e:	0c 92       	st	X, r0

	ret
 170:	08 95       	ret

00000172 <clr_7seg_data>:
// changes: r18, r19, r26, r27
//--------------------------------------------------------------------
.global clr_7seg_data
clr_7seg_data:
	; Set memory pointer 
	ldi r27, hi8( data ) ; pointer registers X (r26:r27)
 172:	b0 e0       	ldi	r27, 0x00	; 0
    ldi r26, lo8( data )
 174:	ad e6       	ldi	r26, 0x6D	; 109
	clr r18 ; empty reg
 176:	22 27       	eor	r18, r18
	ldi r19, 0x0A
 178:	3a e0       	ldi	r19, 0x0A	; 10

0000017a <set_data_loop>:
	set_data_loop:
		st X+, r19 ; store to SRAM / post increment
 17a:	3d 93       	st	X+, r19
		inc r18
 17c:	23 95       	inc	r18
		cpi r18, num_of_data
 17e:	28 30       	cpi	r18, 0x08	; 8
		brne set_data_loop
 180:	e1 f7       	brne	.-8      	; 0x17a <set_data_loop>
 182:	08 95       	ret

00000184 <init_7_seg_driver>:

/*-------------------------------------------------------------------------
* Initialize memory, ports and timer that are used by the 7 segment driver.
*------------------------------------------------------------------------*/
void init_7_seg_driver()
{
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
	// Set Memory
	for( unsigned char i = 0 ; i < num_of_data ; i++ )
		data[i] = 0x0A;
 188:	2a e0       	ldi	r18, 0x0A	; 10
 18a:	fc 01       	movw	r30, r24
 18c:	e3 59       	subi	r30, 0x93	; 147
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	20 83       	st	Z, r18
 192:	01 96       	adiw	r24, 0x01	; 1
* Initialize memory, ports and timer that are used by the 7 segment driver.
*------------------------------------------------------------------------*/
void init_7_seg_driver()
{
	// Set Memory
	for( unsigned char i = 0 ; i < num_of_data ; i++ )
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	91 05       	cpc	r25, r1
 198:	c1 f7       	brne	.-16     	; 0x18a <init_7_seg_driver+0x6>
		data[i] = 0x0A;
	
	// Set encodings
	segments_encoding[0] = 0b00000011;
 19a:	e2 e6       	ldi	r30, 0x62	; 98
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	80 83       	st	Z, r24
	segments_encoding[1] = 0b10011111;
 1a2:	8f e9       	ldi	r24, 0x9F	; 159
 1a4:	81 83       	std	Z+1, r24	; 0x01
	segments_encoding[2] = 0b00100101;
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	82 83       	std	Z+2, r24	; 0x02
	segments_encoding[3] = 0b00001101;
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	83 83       	std	Z+3, r24	; 0x03
	segments_encoding[4] = 0b10011001;
 1ae:	89 e9       	ldi	r24, 0x99	; 153
 1b0:	84 83       	std	Z+4, r24	; 0x04
	segments_encoding[5] = 0b01001001;
 1b2:	89 e4       	ldi	r24, 0x49	; 73
 1b4:	85 83       	std	Z+5, r24	; 0x05
	segments_encoding[6] = 0b01000001;
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	86 83       	std	Z+6, r24	; 0x06
	segments_encoding[7] = 0b00011111;
 1ba:	8f e1       	ldi	r24, 0x1F	; 31
 1bc:	87 83       	std	Z+7, r24	; 0x07
	segments_encoding[8] = 0b00000001;
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	90 87       	std	Z+8, r25	; 0x08
	segments_encoding[9] = 0b00001001;
 1c2:	89 e0       	ldi	r24, 0x09	; 9
 1c4:	81 87       	std	Z+9, r24	; 0x09
	segments_encoding[10] = 0b11111111;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	82 87       	std	Z+10, r24	; 0x0a
	
	// Set Ports A and C as outputs and initialize
	DDRA = 0xFF;
 1ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1cc:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xFF; // all segments off
 1ce:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0b10000000; // in order to start from rightmost 7 segment
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	85 bb       	out	0x15, r24	; 21
	
	// Set Timer0 at ~2ms
	TCCR0 = ( 1 << CS02 ) | ( 1 << WGM01 );
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	83 bf       	out	0x33, r24	; 51
	TIFR = 1 << TOV0;
 1d8:	98 bf       	out	0x38, r25	; 56
	TIMSK = 1 << OCIE0;
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	89 bf       	out	0x39, r24	; 57
	OCR0 = OCR_value;
 1de:	8d e4       	ldi	r24, 0x4D	; 77
 1e0:	8c bf       	out	0x3c, r24	; 60
 1e2:	08 95       	ret

000001e4 <init_USART_driver>:
* Initialize memory, ports and timer that are used by the USART driver.
*------------------------------------------------------------------------*/
void init_USART_driver()
{
	// Set RXD as input and TXD as output.
	DDRD |= ( 0 << 0 ); // RXD
 1e4:	81 b3       	in	r24, 0x11	; 17
 1e6:	81 bb       	out	0x11, r24	; 17
	DDRD |= ( 1 << 1 ); // TXD
 1e8:	89 9a       	sbi	0x11, 1	; 17
	
	// Set UBRR for 9600 baud rate when clock is 10MHz
	UBRRH = high( UBBR_value );
 1ea:	10 bc       	out	0x20, r1	; 32
	UBRRL = low( UBBR_value );
 1ec:	80 e4       	ldi	r24, 0x40	; 64
 1ee:	89 b9       	out	0x09, r24	; 9
	
	// UCSRA doesn't need to change, initial values are okay

	// Enable receiver, receive completed interrupt the transmitter
	// 8 bit word: UCSZ2 = 0
	UCSRB = ( 1 << RXEN ) | ( 1 << RXCIE ) | ( 1 << TXEN );
 1f0:	88 e9       	ldi	r24, 0x98	; 152
 1f2:	8a b9       	out	0x0a, r24	; 10
	
	// Write in UCSRC: URSEL = 1. Asynchronous operation: UMSEL = 0.
	// Parity Disabled: UPM1:0 = 00. 8 bit word: UCSZ1:0 = 11
	UCSRC = ( 1 << URSEL ) | ( 1 << UCSZ1 ) | ( 1 << UCSZ0 );
 1f4:	86 e8       	ldi	r24, 0x86	; 134
 1f6:	80 bd       	out	0x20, r24	; 32
	
	// Initialize transmitter's FSM to neutral state and number of remaining transmits to 0.
	transmitter_status = none;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <transmitter_status>
	num_transmits_left = 0;
 1fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 202:	08 95       	ret

00000204 <main>:
/*-------------------------------------------------------------------------
* Main function. Calls initialization functions, enables interrupt and 
* stay in a infinite loop. Functionality is serviced through interrupts.
*------------------------------------------------------------------------*/
int main()
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	00 d0       	rcall	.+0      	; 0x20a <main+0x6>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
	// Compiler sets stack pointer. No need for the program to do anything.
	
	// Initialize drivers
	init_7_seg_driver();
 20e:	0e 94 c2 00 	call	0x184	; 0x184 <init_7_seg_driver>
	init_USART_driver();
 212:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <init_USART_driver>
	
	// Enable global interrupts
	sei();
 216:	78 94       	sei
	
    while(1) 
    {
		// Debugger doesn't really like empty while loops.
		// Volatile so compiler doesn't optimize it away.
		volatile int i = 0;
 218:	1a 82       	std	Y+2, r1	; 0x02
 21a:	19 82       	std	Y+1, r1	; 0x01
 21c:	fd cf       	rjmp	.-6      	; 0x218 <main+0x14>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
